There are 3 types of interface

Consumer<T> 	It represents an operation that accepts a single argument and returns no result.
Function<T,R> 	It represents a function that accepts one argument and returns a result.
Predicate<T> 	It represents a predicate (boolean-valued function) of one argument.

BiConsumer<T,U> 	It represents an operation that accepts two input arguments and returns no result.
BiFunction<T,U,R> 	It represents a function that accepts two arguments and returns a a result.
BiPredicate<T,U> 	It represents a predicate (boolean-valued function) of two arguments.

Filter -> takes the predicate as input and filter the input
Map -> takes the function as input returns the object - Example Employee object

Differences between Map and FlatMap

map() 	                                                                  flatMap()
It processes stream of values.                       	            It processes stream of stream of values.
It does only mapping. 	                                            It performs mapping as well as flattening.
It’s mapper function produces single value for each input value. 	It’s mapper function produces multiple values for each input value.
It is a One-To-One mapping. 										It is a One-To-Many mapping.
Data Transformation : From Stream to Stream 						Data Transformation : From Stream<Stream> to Stream
Use this method when the mapper function is producing 				Use this method when the mapper function is producing
  a single value for each input value.                                 multiple values for each input value.